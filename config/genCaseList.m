function genOK = genCaseList(caseListXls)
% Description:
%     generate case list file from excel file: caselist.xlsx
%
% EXAMPLE:
%     genCaseList;
%
% INPUT:
%     - none
%
% OUTPUT:
%     - none
%
%  Copyright, 2018, H.B. Zhang, <hongbo.zhang83@gmail.com>
%
% Modifications:
% Version    Date        Author        Log.
% V1.0       20180421    H.B. Zhang    Create this script
% V1.1       20180506    H.B. Zhang    Using cell to construct parval
% V1.2       20180626    H.B. Zhang    Add file path, modified print format
%
% Ref:
%

fileName               = mfilename('fullname');
filePath               = fileparts(mfilename('fullpath'));

caselistXlsFileName    = caseListXls; % 'case_list.xlsx';
if ~exist(caselistXlsFileName,'file')
    fprintf('- Cannot find the case list file: %s. \n', caseListXls);
    genOK              = 0;
    return;
end

% begin to read data
fprintf('%s\n','- begin to generate case list file.');
[~,textdata,raw]    = xlsread(caselistXlsFileName);

parval                 = raw(4:end-1,2:end); % the last line is '};', drop it
parstr                 = textdata(3,2:end);
[casenum,parnum]       = size(parval);

% Create caselist.m file
[~,fileNameTmp,~]      = fileparts(caselistXlsFileName);
caselistFileName       = strcat(fileNameTmp,'.m');

fid                    = fopen(fullfile(filePath,caselistFileName),'w+');
% print personal information
fprintf(fid,'%s\n','% Description:');
fprintf(fid,'%s\n','%     DO NOT change the VALUES of this file!');
fprintf(fid,'%%     This file is generated by %s.m automatically.\n',fileName);
fprintf(fid,'%% \n');
fprintf(fid,'%%     Generated Date: %s\n',datestr(now));
fprintf(fid,'%s\n\n','%  Copyright, 2018, H.B. Zhang, <hongbo.zhang83@gmail.com>');

% print head
fprintf(fid,'%s\n',textdata{1,1});
fprintf(fid,'%s\n\n','clear caseList;');

fprintf(fid,'%s\n',textdata{2,1});
% print parameters mark
fprintf(fid,'%s','%');
for iStr=1:parnum
    fprintf(fid,'\t%-8s',parstr{iStr});
    if (iStr == parnum)
        fprintf(fid,'\n');
    end
end
% print values
for iCase=1:casenum
    for iParm=1:parnum
        valueTmp       = parval{iCase,iParm};
        if isnan(valueTmp)
            fprintf(fid,'\t%.2f','');
        elseif ischar(valueTmp)
            fprintf(fid,'\t%-8s',valueTmp);
        else
            fprintf(fid,'\t%-8s',num2str(valueTmp));
        end
        if (iParm == parnum)
            fprintf(fid,';\n');
        end
    end
end
fprintf(fid,'\n%s\n\n',textdata{end,1});

% print 'parstr' statement
fprintf(fid,'%s\n','% parameter string');
fprintf(fid,'%s','parstr = { ');
for iStr=1:parnum
    fprintf(fid,'''%s''',parstr{iStr});
    if (iStr == parnum)
        fprintf(fid,'};\n');
    else
        fprintf(fid,',');
    end
end

% print variable 'caseList' statement
fprintf(fid,'%s\n','caseList  = cell2struct(parval,parstr,2);');
fclose(fid);

genOK                  = 1;
open(caselistFileName);

fprintf('- generate case list file completed: %s.\n', caselistFileName);
end