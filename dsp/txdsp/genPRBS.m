function [bitsOut, stateOut] = genPRBS(N, n, PNgenNum, stateIn)
% Description:
%     Generate PRBS stream
% 
% EXAMPLE:
%     [bitsOut, stateOut] = genPRBS(N, n, PNgenNum, stateIn)
%     
% INPUT:
%     N            - Input PN order
%     n            - number of bits
%     PNgenNum     - PN generator number
%     stateIn      - input state
%     
% OUTPUT:
%     bitsOut      - output PRBS bits
%     stateOut     - output state
% 
%  Copyright, 2018, H.B. Zhang, <hongbo.zhang83@gmail.com>
%
% Modifications:
% Version    Date        Author        Log.
% V1.0       20180413    H.B. Zhang    Create this script
% 
% Ref:
% http://www.newwaveinstruments.com/resources/articles/m_sequence_linear_feedback_shift_register_lfsr.htm

if (nargin < 4)
    stateIn = [1, zeros(1,N-1)];
end

if (n == -1)
    n = 2^N - 1;
end

bitsOut                = zeros(n,1);
stateOut               = stateIn;

GenList = {      [2,1],...
                 [7,6],...
                 [7,4],...
                 [7,6,5,4],...
                 [8,7,6,1],...
                 [8,7,5,3],...
                 [8,7,3,2],...
                 [9,5],...
                 [9,8,7,2],...
                 [9,8,6,5],...
                 [10,7],...
                 [10,9,8,5],...
                 [10,9,7,6],...
                 [10,9,7,3],...
                 [12,11,10,9,8,4],...
                 [12,11,10,4],...
                 [12,11,10,2],...
                 [13,12,11,8],...
                 [13,12,11,2],...
                 [13,12,11,1],...
                 [14,13,12,2],...
                 [14,13,11,9],...
                 [14,13,11,4],...
                 [15,14],...
                 [15,11],...
                 [15,8],...
                 [16,15,13,4],...
                 [16,15,12,10],...
                 [16,15,12,1],...
                 [17,14],...
                 [17,12],...
                 [17,11],...
                 [18,17,16,13],...
                 [18,17,16,13],...
                 [18,17,16,10],...
                 [18,17,16,5],...
                 };
  
 GenListSubNdx         = 0;
 for GenListNdx = 1:length(GenList)
     if (GenList{GenListNdx}(1) == N)
         GenListSubNdx = GenListSubNdx + 1;
         if (GenListSubNdx == PNgenNum)
             break;
         else
             % do nothing
         end
     else
         % do nothing
     end
 end

 if (GenListNdx == length(GenList))
     disp('WARNING (in genPRBS.m): PN sequence index out of bound, PN18 is applied!');
     N                 = 18;
     stateOut          = zeros(1,N);
     stateOut(1)       = 1;
 else
     % do nothing
 end
 
 twv                   = zeros(N,1);
 twv(GenList{GenListNdx}) = 1;
 
 for idx = 1:n
     bitsOut(idx)      = stateOut(N);
     tmp               = mod(stateOut*twv,2);
     stateOut(2:N)     = stateOut(1:N-1);
     stateOut(1)       = tmp;
 end
 
end